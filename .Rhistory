remove.packages("ws2pgdb")
library(devtools)
devtools::install_github("rabravo/ws2pgdb")
devtools::install_github("rabravo/ws2pgdb")
getwd()
setwd("Desktop/Rlibs/ws2pgdb")
devtools::document()
devtools::check()
devtools::check()
install.packages(deldir)
install.packages("deldir")
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
install.packages("RcppOctave")
devtools::check()
devtools::check()
devtools::check()
devtools::check()
RcppOctave::.O$var <- 10
RcppOctave::.$a
RcppOctave::.O$inf
RcppOctave::.O$time
RcppOctave::.O
$x
$sum
$x <- 10
RcppOctave::.O$sum([1 2 3])
devtools::check()
devtools::check()
devtools::check()
devtools::check()
getwd()
devtools::load_all()
example(ws2pgdb)
example(all_coor_ws_2_pgdb)
devtools::run_examples(pkg = ws2pgdb)
devtools::load_all()
devtools::run_examples(pkg = ws2pgdb)
devtools::run_examples(pkg = "ws2pgdb")
devtools::run_examples(pkg = "ws2pgdb". test = TRUE)
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::load_all()
ghcnd <- 'GHCND'
geoid <- '12087'
type  <- 'PRCP'
suffix <- 'all_coor'
ghcnd
geoid
type
suffix
type <- "TMAX"
ws2pgdb::all_coor_ws_2_pgdb()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::run_examples()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
config$token1
config$token
#' ghcnd        <- 'GHCND'
#' geoid        <- '48113'
#' type         <- 'TMAX'
#' sDate       <- '2000-01-01'
#' fDate       <- '2001-01-01'
ghcnd        <- 'GHCND'
geoid        <- '48113'
type         <- 'TMAX'
sDate       <- '2000-01-01'
fDate       <- '2001-01-01'
ghcnd
geoid
type
sDate
fDate
stations     <- as.data.frame(all_coor_ws(ghcnd, geoid, type))
ws_metadata  <- ws_metadata_by_date_2_pgdb( geoid, type, stations, sDate, fDate)
ws_metadata
devtools::load_all()
ws_data_avg_by_date_2_pgdb(ghcnd, geoid, type, sDate, fDate, ws_metadata)
getwd()
devtools::check()
devtools::check()
remove.packages("ws2pgdb")
devtools::install_github("rabravo/ws2pgdb")
pgfile <- base::paste(Sys.getenv("PWD"), "/", "pg_config.yml", sep = "")
print(pgfile)
pwd    <- base::Sys.getenv("PWD")
print(pwd)
config <- yaml::yaml.load_file( pgfile )
drv    <- RPostgres::Postgres()
conn   <- RPostgres::dbConnect( drv,
host     = config$dbhost,
port     = config$dbport,
dbname   = config$dbname,
user     = config$dbuser,
password = config$dbpwd
)
res    <- RPostgres::dbSendQuery(conn, sprintf("SELECT r_table_prefix('%1$s')", geoid))
prefix <- base::as.character(RPostgres::dbFetch(res))
pretableName <- base::paste(prefix, "tiger_tracts", sep = "")
RPostgres::dbClearResult(res)
geoid
pretableName
res    <- RPostgres::dbSendQuery(conn, sprintf("SELECT r_table_exists('%1$s')", pretableName) )
tableExist <- base::as.integer( RPostgres::dbFetch(res) )
RPostgres::dbClearResult(res)
tableExist
res    <- RPostgres::dbSendQuery(conn, sprintf("SELECT r_fips_2_state('%1$s')", geoid) )
state  <- base::as.character(RPostgres::dbFetch(res))
RPostgres::dbClearResult(res)
state  <- gsub(" ", "_", state)
ftp    <- "ftp://ftp2.census.gov/geo/pvs/tiger2010st/"
url    <- base::paste(ftp, substr(geoid, 1, 2), "_", state, "/", geoid, "/", sep = "")
file   <- base::paste("tl_2010_", geoid, "_tract10", sep = "")
tableName  <- base::paste(file, sep = "")
ext    <- ".zip"
pfile  <- base::paste(pwd, "/", file, sep = "")
download   <- base::paste(url, file, ext, sep="")
zipFile    <- base::paste(pwd, "/temp/", file, ext, sep = "")
download
h <- curl::new_handle()
class(h)
attr(h)
curl::handle_setopt( handle = h, userpwd = "Anonymous:guest")
err <- try( curl::curl_download(download, zipFile, quiet = TRUE, handle = h ) )
curl::curl_download()
curl::curl_download
err <- try( curl::curl_download(download, zipFile, mode = "wb" quiet = TRUE, handle = h ) )
err <- try( curl::curl_download(download, zipFile, mode = "wb", quiet = TRUE, handle = h ) )
getwd()
err <- try( utils::download.file(url, zipFile, "wget", quiet = TRUE, extra = getOption("--user=Anonymous --password=guest") ) )
utils::download.file
url
zipFile
file
download
err <- try( utils::download.file(download, zipFile, "wget", quiet = TRUE, extra = getOption("--user=Anonymous --password=guest") ) )
err <- try( utils::download.file(download, zipFile, "wget", quiet = TRUE, extra = getOption("--user=Anonymous") ) )
err <- try( utils::download.file(download, zipFile, "wget", quiet = TRUE, extra = getOption(" --user=Anonymous --password=guest") ) )
err <- try( utils::download.file(download, zipFile, "wget", quiet = TRUE, extra = getOption(" --user=Anonymous --password=guest ") ) )
err <- try( utils::download.file(download, zipFile, "wget", quiet = TRUE, extra = getOption(" --user=Anonymous --password=guest ") ) )
err
class(err)
url     <- "http://www.epimodels.org/10_Midas_Docs/SynthPop/2010/counties/"
file      <- base::paste("2010_ver1_", geoid, sep = "")
pfile     <- base::paste(pwd, "/", "2010_ver1_", geoid, sep = "")
extractedFile <- base::paste(file, "_synth_households.txt", sep = "")
updatedFile   <- base::paste(pfile, "_synth_hh.csv", sep = "")
zipFile   <- base::paste(pfile, ".zip", sep = "")
download  <- base::paste(url, file, ".zip", sep = "")
download
err <- try( utils::download.file(download, zipFile, "wget", quiet = TRUE, extra = getOption(" --user=Anonymous --password=guest ") ) )
zipFile
err
download_tmp <- download
download_temp
download_tmp
download <- base::paste(download, ".exe", sep = "")
err <- try( utils::download.file(download, zipFile, "wget", quiet = TRUE, extra = getOption(" --user=Anonymous --password=guest ") ) )
err
class(err)
err <- try( utils::download.file(download_tmp, zipFile, "wget", quiet = TRUE))
err
as.char(0)
as.character(0)
class(err)
zipFile
pfile
devtools::check()
devtools::run_examples()
devtools::check()
geoid = "12087"
geoid <- "12087"
pwd     <- base::Sys.getenv("PWD")
file   <- base::paste(Sys.getenv("HOME"), "/", "pg_config.yml", sep = "")
config <- yaml::yaml.load_file( file )
drv    <- RPostgres::Postgres()
conn   <- RPostgres::dbConnect( drv,
host     = config$dbhost,
port     = config$dbport,
dbname   = config$dbname,
user     = config$dbuser,
password = config$dbpwd
)
res  <- RPostgres::dbSendQuery( conn, sprintf("SELECT r_table_prefix('%1$s')", geoid) )
pre  <- as.character(RPostgres::dbFetch(res))
RPostgres::dbClearResult(res)
tableName  <- paste(pre,"midas_synth_hh", sep="")
res        <- RPostgres::dbSendQuery( conn, sprintf("SELECT r_table_exists('%1$s')", tableName) )
tableExist <- as.integer(RPostgres::dbFetch(res))
RPostgres::dbClearResult(res)
if (tableExist) {
RPostgres::dbDisconnect(conn)
return(tableName)
} else {
res   <- RPostgres::dbSendQuery(conn, sprintf( "SELECT r_create_synth_hh_table_template('%1$s')", tableName ) )
debug <- as.integer(RPostgres::dbFetch(res))
RPostgres::dbClearResult(res)
url     <- "http://www.epimodels.org/10_Midas_Docs/SynthPop/2010/counties/"
file      <- base::paste("2010_ver1_", geoid, sep = "")
pfile     <- base::paste(pwd, "/", "2010_ver1_", geoid, sep = "")
extractedFile <- base::paste(file, "_synth_households.txt", sep = "")
updatedFile   <- base::paste(pfile, "_synth_hh.csv", sep = "")
zipFile   <- base::paste(pfile, ".zip", sep = "")
download  <- base::paste(url, file, ".zip", sep = "")
# err <- try (curl::curl_download(download, zipFile, quiet = TRUE))
err <- try( utils::download.file(download, zipFile, "wget", quiet = TRUE, extra = getOption(" --user=Anonymous --password=guest ") ) )
if ( class(err) == "try-error" ) {
RPostgres::dbClearResult(res)
RPostgres::dbDisconnect(conn)
return("")
}# endIF
utils::unzip(paste(pfile, ".zip", sep = ""), file = extractedFile)
input     <- utils::read.csv( file = extractedFile, head = TRUE, sep = ",")
out       <- input[c("stcotrbg", "hh_race", "hh_income","hh_size", "hh_age", "longitude", "latitude")]
utils::write.csv(out, file = updatedFile, row.names = FALSE)
res   <- RPostgres::dbSendQuery(conn, sprintf( "COPY \"%1$s\" FROM '%2$s' DELIMITER ',' CSV HEADER;", tableName, updatedFile) )
err <- as.character(RPostgres::dbFetch(res))
RPostgres::dbClearResult(res)
q5 <- paste("rm ", zipFile, " ", updatedFile, " ", extractedFile, sep = "")
system(q5)
}
err
class(err)
download
err <- try( utils::download.file(download, zipFile, "wget", quiet = TRUE)
)
err
class(err)
err <- try( utils::download.file(download, zipFile, "wget", quiet = TRUE)
)
dir    <- base::paste(pwd, "/", "temp", sep = "")
utils::unzip(zipFile, overwrite = 'TRUE', exdir = dir)
scriptFile    <- base::paste(file, ".sql", sep = "")
sqlscriptPath <- base::paste(pwd, "/temp/", scriptFile, sep = "")
q5 <- base::paste("shp2pgsql -c -s 4269 -g the_geom -W latin1 ",pwd, "/", "temp/", file, ".shp", " public.", pretableName, " " ,config$dbname," > ", sqlscriptPath, sep = "")
q5
system(q5)
url     <- "http://www.epimodels.org/10_Midas_Docs/SynthPop/2010/counties/"
file      <- base::paste("2010_ver1_", geoid, sep = "")
pfile     <- base::paste(pwd, "/", "2010_ver1_", geoid, sep = "")
extractedFile <- base::paste(file, "_synth_households.txt", sep = "")
updatedFile   <- base::paste(pfile, "_synth_hh.csv", sep = "")
zipFile   <- base::paste(pfile, ".zip", sep = "")
download  <- base::paste(url, file, ".zip", sep = "")
utils::unzip(paste(pfile, ".zip", sep = ""), file = extractedFile)
input     <- utils::read.csv( file = extractedFile, head = TRUE, sep = ",")
out       <- input[c("stcotrbg", "hh_race", "hh_income","hh_size", "hh_age", "longitude", "latitude")]
utils::write.csv(out, file = updatedFile, row.names = FALSE)
res   <- RPostgres::dbSendQuery(conn, sprintf( "COPY \"%1$s\" FROM '%2$s' DELIMITER ',' CSV HEADER;", tableName, updatedFile) )
err <- as.character(RPostgres::dbFetch(res))
RPostgres::dbClearResult(res)
pfile
RPostgres::dbIsValid(conn)
tableName
updatedFile
extractedFile
file
extractedFile <- base::paste(pfile, "_synth_households.txt", sep = "")
updatedFile   <- base::paste(pfile, "_synth_hh.csv", sep = "")
extractedFile
updatedFile
url     <- "http://www.epimodels.org/10_Midas_Docs/SynthPop/2010/counties/"
file      <- base::paste("2010_ver1_", geoid, sep = "")
pfile     <- base::paste("/tmp/2010_ver1_", geoid, sep = "")
zipFile   <- base::paste(pfile, ".zip", sep = "")
download  <- base::paste(url, file, ".zip", sep = "")
err <- try( utils::download.file(download, zipFile, "wget", quiet = TRUE))
if ( class(err) == "try-error" ) {
RPostgres::dbClearResult(res)
RPostgres::dbDisconnect(conn)
return("")
}# endIF
extractedFile <- base::paste(pfile, "_synth_households.txt", sep = "")
updatedFile   <- base::paste(pfile, "_synth_hh.csv", sep = "")
utils::unzip(paste(pfile, ".zip", sep = ""), file = extractedFile)
input     <- utils::read.csv( file = extractedFile, head = TRUE, sep = ",")
out       <- input[c("stcotrbg", "hh_race", "hh_income","hh_size", "hh_age", "longitude", "latitude")]
utils::write.csv(out, file = updatedFile, row.names = FALSE)
pfile
err
download
zipFile
utils::unzip(zipfile)
utils::unzip(zipFile)
utils::unzip(zipFile, file = extractedFile)
extractedFile
utils::unzip(zipFile, file = extractedFile)
utils::unzip()
?utils::unzip()
extractedFile
extractedFile <- "2010_ver1_12087_synth_households.txt"
extractedFile
utils::unzip(zipFile, file = extractedFile, exdir = "/tmp")
url     <- "http://www.epimodels.org/10_Midas_Docs/SynthPop/2010/counties/"
file      <- base::paste("2010_ver1_", geoid, sep = "")
pfile     <- base::paste("/tmp/2010_ver1_", geoid, sep = "")
zipFile   <- base::paste(pfile, ".zip", sep = "")
download  <- base::paste(url, file, ".zip", sep = "")
err <- try( utils::download.file(download, zipFile, "wget", quiet = TRUE))
err <- try( utils::download.file(download, zipFile, "wget", quiet = TRUE))
err <- try( utils::download.file(download, zipFile, "wget", quiet = TRUE))
extractedFile <- base::paste(file, "_synth_households.txt", sep = "")
utils::unzip(paste(pfile, ".zip", sep = ""), file = extractedFile, exdir = "/tmp")
input <- utils::read.csv( file = extractedFile, head = TRUE, sep = ",")
updatedFile <- base::paste(pfile, "_synth_hh.csv", sep = "")
out <- input[c("stcotrbg", "hh_race", "hh_income","hh_size", "hh_age", "longitude", "latitude")]
utils::write.csv(out, file = updatedFile, row.names = FALSE)
RPostgres::dbIsValid(conn)
RPostgres::dbClearResult(res)
res <- RPostgres::dbSendQuery(conn, sprintf( "COPY \"%1$s\" FROM '%2$s' DELIMITER ',' CSV HEADER;", tableName, updatedFile))
res   <- RPostgres::dbSendQuery(conn, sprintf( "SELECT r_create_synth_hh_table_template('%1$s')", tableName ) )
debug <- as.integer(RPostgres::dbFetch(res))
RPostgres::dbClearResult(res)
res <- RPostgres::dbSendQuery(conn, sprintf( "COPY \"%1$s\" FROM '%2$s' DELIMITER ',' CSV HEADER;", tableName, updatedFile))
err <- as.character(RPostgres::dbFetch(res))
RPostgres::dbClearResult(res)
zipFile
updatedFile
extractedFile
q5 <- paste("rm ", zipFile, " ", updatedFile, " /tmp/", extractedFile, sep = "")
system(q5)
q5
RPostgres::dbIsValid(conn)
res  <- RPostgres::dbSendQuery( conn, sprintf("SELECT r_table_prefix('%1$s')", geoid) )
pre  <- as.character(RPostgres::dbFetch(res))
RPostgres::dbClearResult(res)
tableName  <- paste(pre,"midas_synth_hh", sep="")
res        <- RPostgres::dbSendQuery( conn, sprintf("SELECT r_table_exists('%1$s')", tableName) )
tableExist <- as.integer(RPostgres::dbFetch(res))
RPostgres::dbClearResult(res)
if (tableExist) {
RPostgres::dbDisconnect(conn)
return(tableName)
} else {
res   <- RPostgres::dbSendQuery(conn, sprintf( "SELECT r_create_synth_hh_table_template('%1$s')", tableName ) )
debug <- as.integer(RPostgres::dbFetch(res))
RPostgres::dbClearResult(res)
url     <- "http://www.epimodels.org/10_Midas_Docs/SynthPop/2010/counties/"
file      <- base::paste("2010_ver1_", geoid, sep = "")
pfile     <- base::paste("/tmp/2010_ver1_", geoid, sep = "")
zipFile   <- base::paste(pfile, ".zip", sep = "")
download  <- base::paste(url, file, ".zip", sep = "")
err <- try( utils::download.file(download, zipFile, "wget", quiet = TRUE))
if ( class(err) == "try-error" ) {
RPostgres::dbClearResult(res)
RPostgres::dbDisconnect(conn)
return("")
}# endIF
extractedFile <- base::paste(file, "_synth_households.txt", sep = "")
utils::unzip(paste(pfile, ".zip", sep = ""), file = extractedFile, exdir = "/tmp")
input <- utils::read.csv( file = extractedFile, head = TRUE, sep = ",")
updatedFile <- base::paste(pfile, "_synth_hh.csv", sep = "")
out <- input[c("stcotrbg", "hh_race", "hh_income","hh_size", "hh_age", "longitude", "latitude")]
utils::write.csv(out, file = updatedFile, row.names = FALSE)
res <- RPostgres::dbSendQuery(conn, sprintf( "COPY \"%1$s\" FROM '%2$s' DELIMITER ',' CSV HEADER;", tableName, updatedFile))
RPostgres::dbClearResult(res)
q5 <- paste("rm ", zipFile, " ", updatedFile, " /tmp/", extractedFile, sep = "")
system(q5)
return(tableName)
}# endIF/ELSE
res  <- RPostgres::dbSendQuery( conn, sprintf("SELECT r_table_prefix('%1$s')", geoid) )
pre  <- as.character(RPostgres::dbFetch(res))
RPostgres::dbClearResult(res)
pre
tableName  <- paste(pre,"midas_synth_hh", sep="")
res        <- RPostgres::dbSendQuery( conn, sprintf("SELECT r_table_exists('%1$s')", tableName) )
tableExist <- as.integer(RPostgres::dbFetch(res))
RPostgres::dbClearResult(res)
res        <- RPostgres::dbSendQuery( conn, sprintf("SELECT r_table_exists('%1$s')", tableName) )
tableExist <- as.integer(RPostgres::dbFetch(res))
RPostgres::dbClearResult(res)
res   <- RPostgres::dbSendQuery(conn, sprintf( "SELECT r_create_synth_hh_table_template('%1$s')", tableName ) )
debug <- as.character(RPostgres::dbFetch(res))
debug
RPostgres::dbClearResult(res)
url     <- "http://www.epimodels.org/10_Midas_Docs/SynthPop/2010/counties/"
file      <- base::paste("2010_ver1_", geoid, sep = "")
pfile     <- base::paste("/tmp/2010_ver1_", geoid, sep = "")
zipFile   <- base::paste(pfile, ".zip", sep = "")
download  <- base::paste(url, file, ".zip", sep = "")
err <- try( utils::download.file(download, zipFile, "wget", quiet = TRUE))
if ( class(err) == "try-error" ) {
RPostgres::dbClearResult(res)
RPostgres::dbDisconnect(conn)
return("")
}# endIF
RPostgres::dbIsValid(conn)
extractedFile <- base::paste(file, "_synth_households.txt", sep = "")
utils::unzip(paste(pfile, ".zip", sep = ""), file = extractedFile, exdir = "/tmp")
extractedFile
input <- utils::read.csv( file = base::paste("/tmp/", extractedFile, sep = ""), head = TRUE, sep = ",")
updatedFile <- base::paste(pfile, "_synth_hh.csv", sep = "")
updatedFile
utils::write.csv(out, file = updatedFile, row.names = FALSE)
res <- RPostgres::dbSendQuery(conn, sprintf( "COPY \"%1$s\" FROM '%2$s' DELIMITER ',' CSV HEADER;", tableName, updatedFile))
RPostgres::dbClearResult(res)
q5 <- paste("rm ", zipFile, " ", updatedFile, " /tmp/", extractedFile, sep = "")
q5
system(q5)
res    <- RPostgres::dbSendQuery(conn, sprintf("SELECT r_table_prefix('%1$s')", geoid))
prefix <- base::as.character(RPostgres::dbFetch(res))
pretableName <- base::paste(prefix, "tiger_tracts", sep = "")
RPostgres::dbClearResult(res)
pretableName
prefix
res    <- RPostgres::dbSendQuery(conn, sprintf("SELECT r_table_exists('%1$s')", pretableName) )
tableExist <- base::as.integer( RPostgres::dbFetch(res) )
RPostgres::dbClearResult(res)
tableExist
res    <- RPostgres::dbSendQuery(conn, sprintf("SELECT r_fips_2_state('%1$s')", geoid) )
state  <- base::as.character(RPostgres::dbFetch(res))
RPostgres::dbClearResult(res)
state
state  <- gsub(" ", "_", state)
ftp    <- "ftp://ftp2.census.gov/geo/pvs/tiger2010st/"
url    <- base::paste(ftp, substr(geoid, 1, 2), "_", state, "/", geoid, "/", sep = "")
file   <- base::paste("tl_2010_", geoid, "_tract10", sep = "")
tableName  <- base::paste(file, sep = "")
state
url
file
tableName
ext    <- ".zip"
pfile  <- base::paste("/tmp/", file, sep = "")
ext
pfile
download   <- base::paste(url, file, ext, sep="")
download
zipFile    <- base::paste("/tmp/", file, ext, sep = "")
zipFile
err <- try( utils::download.file(download, zipFile, "wget", quiet = TRUE, extra = getOption(" --user=Anonymous --password=guest ")))
class(err)
dir    <- base::paste("/tmp", sep = "")
utils::unzip(zipFile, overwrite = 'TRUE', exdir = dir)
file
pretableName
config$dbname
sqlscriptPath
scriptFile    <- base::paste(file, ".sql", sep = "")
sqlscriptPath <- base::paste("/tmp/", scriptFile, sep = "")
sqlscriptPath
q5 <- base::paste("shp2pgsql -c -s 4269 -g the_geom -W latin1 /tmp/", file, ".shp", " public.", pretableName, " " ,config$dbname," > ", sqlscriptPath, sep = "")
q5
system(q5)
result <- system(q5)
system()
system
system(q5, ignore.stdout = TRUE)
q6 <- base::paste("export PGPASSWORD = config$dbpwd & psql ",
" -d ", config$dbname,
" -U ", config$dbuser,
" -p ", config$dbport,
" -q --file='", sqlscriptPath, "'",
sep = ""
)
q6
system(q6)
q6 <- base::paste("set PGPASSWORD = config$dbpwd & psql ",
" -d ", config$dbname,
" -U ", config$dbuser,
" -p ", config$dbport,
" -q --file='", sqlscriptPath, "'",
sep = ""
)
q6 <- base::paste("set PGPASSWORD=config$dbpwd & psql ",
" -d ", config$dbname,
" -U ", config$dbuser,
" -p ", config$dbport,
" -q --file='", sqlscriptPath, "'",
sep = ""
)
q6
system(q6)
q7 <- paste("rm /tmp/tl_2010*.???", sep = "")
q7
system(q7)
stations <- as.data.frame(all_coor_ws(ghcnd = 'GHCND', geoid = '12087', type = 'TMAX'))
ws_metadata_span_2_pgdb( geoid = '12087', type = 'TMAX', stations, span = '2')
remove.packages("ws2pgdb")
devtools::install_github("rabravo/ws2pgdb")
